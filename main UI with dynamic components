// lib/main.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'providers/form_provider.dart';
import 'models/form_component.dart';

void main() {
  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (_) => FormProvider()),
      ],
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dynamic Form',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamic Form'),
        actions: [
          IconButton(
            icon: Icon(Icons.save),
            onPressed: () {
              final formProvider = Provider.of<FormProvider>(context, listen: false);
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  content: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: formProvider.components.map((component) {
                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 8.0),
                          child: Text(
                            'Label: ${component.label}\nInfo-Text: ${component.infoText}\nSettings: ${component.settings}\n',
                            style: TextStyle(fontSize: 16),
                          ),
                        );
                      }).toList(),
                    ),
                  ),
                ),
              );
            },
          ),
        ],
      ),
      body: Consumer<FormProvider>(
        builder: (context, formProvider, child) {
          return Column(
            children: [
              Expanded(
                child: ListView.builder(
                  itemCount: formProvider.components.length,
                  itemBuilder: (context, index) {
                    return FormComponentWidget(
                      index: index,
                      component: formProvider.components[index],
                    );
                  },
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton(
                  onPressed: formProvider.addComponent,
                  child: Text('ADD'),
                ),
              ),
            ],
          );
        },
      ),
    );
  }
}

class FormComponentWidget extends StatelessWidget {
  final int index;
  final FormComponent component;

  FormComponentWidget({
    required this.index,
    required this.component,
  });

  @override
  Widget build(BuildContext context) {
    final formProvider = Provider.of<FormProvider>(context);

    return Card(
      margin: EdgeInsets.all(8.0),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextFormField(
              initialValue: component.label,
              decoration: InputDecoration(labelText: 'Label'),
              onChanged: (value) {
                formProvider.updateComponent(index, FormComponent(
                  label: value,
                  infoText: component.infoText,
                  settings: component.settings,
                ));
              },
            ),
            TextFormField(
              initialValue: component.infoText,
              decoration: InputDecoration(labelText: 'Info-Text'),
              onChanged: (value) {
                formProvider.updateComponent(index, FormComponent(
                  label: component.label,
                  infoText: value,
                  settings: component.settings,
                ));
              },
            ),
            TextFormField(
              initialValue: component.settings,
              decoration: InputDecoration(labelText: 'Settings'),
              onChanged: (value) {
                formProvider.updateComponent(index, FormComponent(
                  label: component.label,
                  infoText: component.infoText,
                  settings: value,
                ));
              },
            ),
            Align(
              alignment: Alignment.centerRight,
              child: ElevatedButton(
                onPressed: () {
                  formProvider.removeComponent(index);
                },
                child: Text('Remove'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
